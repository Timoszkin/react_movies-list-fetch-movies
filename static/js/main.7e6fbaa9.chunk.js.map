{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","FindMovie","addToApp","useState","message","setMessage","failedtoLoad","setLoadIssues","loadMovie","sendRequest","name","fetch","then","response","json","result","Error","onSubmit","event","preventDefault","target","reset","htmlFor","type","id","placeholder","concat","onChange","input","value","toString","trim","onClick","App","moviesList","setMovieList","find","el","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e6fbaa9.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  addToApp: (user: Movie) => void\n};\n\nexport const FindMovie: React.FC<Props> = ({ addToApp }) => {\n  const [message, setMessage] = useState('');\n  const [failedtoLoad, setLoadIssues] = useState(false);\n  const [movie, loadMovie] = useState({\n    Poster: '',\n    Title: '',\n    Plot: '',\n    imdbID: '',\n  });\n\n  const searchText = (input:string) => {\n    loadMovie({\n      Poster: '',\n      Title: '',\n      Plot: '',\n      imdbID: '',\n    });\n    setLoadIssues(false);\n    setMessage(input);\n  };\n\n  const sendRequest = (name: string) => {\n    fetch(`https://www.omdbapi.com/?apikey=e45c8c40&t=${name}`)\n      .then(response => response.json())\n      .then(result => {\n        if (result.Error) {\n          setLoadIssues(true);\n        } else {\n          loadMovie({\n            Poster: result.Poster,\n            Title: result.Title,\n            Plot: result.Plot,\n            imdbID: result.imdbID,\n          });\n        }\n      });\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendRequest(message);\n          const target = event.target as HTMLFormElement;\n\n          target.reset();\n        }}\n      >\n        <div className=\"field\">\n          <label\n            className=\"label\"\n            htmlFor=\"movie-title\"\n          >\n            Movie title\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className={'input'.concat(failedtoLoad ? ' is-danger' : '')}\n                onChange={(event) => searchText(event.target.value.toString().trim())}\n              />\n            </div>\n          </label>\n          {failedtoLoad\n            && (\n              <p\n                className=\"help is-danger\"\n              >\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => sendRequest(message)}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n              onClick={() => addToApp(movie)}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {movie.imdbID\n          ? <MovieCard movie={movie} />\n          : ''}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [moviesList, setMovieList] = useState<Movie[]>([]);\n\n  const getMovie = (movie :Movie) => {\n    if (moviesList.find((el: Movie) => el.imdbID === movie.imdbID)) {\n      return;\n    }\n\n    if (movie.Title === '') {\n      return;\n    }\n\n    setMovieList([...moviesList, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addToApp={getMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}